%function [ ] = demo_distreg_zoltan( )
%DEMO_DISTREG_ZOLTAN Demonstrate how to use distreg_zoltan 
%@author Wittawat
%
seed = 3;
oldRng = rng();
rng(seed);

% The following functions are not needed by distreg_zoltan.m
% Just for data construction.
%
% Likelihood function handle.
% Gaussian likelihood as an example. We want to infer the mean of the Gaussian.
likelihood_func = @(theta, n)randn(1, n) + theta;
% 
% Exponential likelihood
%likelihood_func = @(theta, n)exprnd(theta, 1, n);

% A proposal distribution for drawing the latent variables of interest.
proposal_dist = @(n)randn(1, n)*sqrt(8);

%
% uniform 
%proposal_dist = @(n)unifrnd(0.1, 10, 1, n);


% distreg_zoltan needs a training set containing 
% (bags of samples as a cell array, parameters) pairs.
% construct a training set
num_latent_draws = 100; % this is also the training size
num_pseudo_data = 50;
% regression target
train_params = proposal_dist(num_latent_draws);
% regression input
train_bags = cell(1, num_latent_draws);
% for each single parameter, we need to construct a bag of 
% observations generated by the parameter.
for i=1:size(train_params, 2)
    theta = train_params(:, i);
    observations = likelihood_func(theta, num_pseudo_data);
    train_bags{i} = observations;
end

% ------- options for distreg_zoltan ------------
% All options are described in kabc_cond_embed
op = struct();
op.seed = seed;

% a list of regularization parameter candidates in kabc. 
% Chosen by cross validation.
ntr = num_latent_draws;
op.drz_reg_list = 10.^(-4:2:3);

% number of folds to perform in cross validation
op.drz_cv_fold = 2;

% a list of Gaussian widths squared to be used as candidates for Gaussian kernel
funcs = funcs_distreg_zoltan();
subbags = 300;
med = funcs.meddistance_bags(train_bags, subbags);
op.drz_gwidth2_list = [ 1/2, 1, 2].* (med^2);

% epsilon values
op.drz_outwidth2_list = 10.^(-3:-1);

% number of subsamples to use for cross validation. This is for speeding up 
% the computation in cross validation. After the best parameter combination 
% is chosen, full dataset will be used to train.
op.drz_cv_num_subsamples = min(ntr, 5000) ;

% ---- training ------
[R, op] = distreg_zoltan(train_bags, train_params, op);
% R contains a regression function mapping from a bag to its param
%

% ---- test phase --------------
% generate some observations
% Try to play with true_theta and check the result.
true_theta = -1;
num_obs = 100;
obs_bag = likelihood_func(true_theta, num_obs );

% prediction of theta weights
% Use regression function mapping from a stat to its param
weights_func = R.regress_weights_func;
W = weights_func(obs_bag);

means = cellfun(@(b)mean(b, 2), train_bags);
observed_stat = mean(obs_bag);
% plot weights 
figure 
hold on
stem(train_params, W);
set(gca, 'fontsize', 16);
title(sprintf('true theta: %.2g, Observed stat: %.2g, likelihood = %s', ...
    true_theta, observed_stat, func2str(likelihood_func) ));
grid on
hold off 


% change seed back 
rng(oldRng);
%end


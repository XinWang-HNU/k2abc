% function demo_distreg_zoltan_custom_loss( )
%DEMO_DISTREG_ZOLTAN_CUSTOM_LOSS Demonstrate how to use distreg_zoltan_custom_loss
%@author Wittawat
%
seed = 3;
oldRng = rng();
rng(seed);

% The following functions are not needed by distreg_zoltan_custom_loss.
% Just for data construction.
%
% Likelihood function handle.
%  Gaussian likelihood as an example
likelihood_func = @(theta, n)randn(1, n) + theta;
% 
% Exponential likelihood
%likelihood_func = @(theta, n)exprnd(theta, 1, n);

% A proposal distribution for drawing the latent variables of interest.
proposal_dist = @(n)randn(1, n)*sqrt(8);
%
% uniform 
%proposal_dist = @(n)unifrnd(0.1, 10, 1, n);

% distreg_zoltan_custom_loss needs a training set containing (bags,  parameter) pairs.
% construct a training set.
num_latent_draws = 100; % this is also the training size
num_pseudo_data = 50;
train_params = proposal_dist(num_latent_draws);
train_bags = cell(1, num_latent_draws);
% for each single parameter, we need to construct a summary statistic of 
% observations generated by the parameter.
for i=1:size(train_params, 2)
    theta = train_params(:, i);
    observations = likelihood_func(theta, num_pseudo_data);
    train_bags{i} = observations;
end


% ------- options for distreg_zoltan_custom_loss ------------
% All options are described in distreg_zoltan_custom_loss 
op = struct();
op.seed = seed;

% a list of regularization parameter candidates 
ntr = num_latent_draws;
op.drz_reg_list = 10.^(-4:2:4);

% a list of Gaussian widths squared to be used as candidates for Gaussian kernel
funcs = funcs_distreg_zoltan();
subbags = 200;
med = funcs.meddistance_bags(train_bags, subbags);
op.drz_gwidth2_list = [1/2, 1, 2].* (med^2);

% epsilon values
op.drz_outwidth2_list = 10.^(-3:-1);

%
% generate some actual observations.
true_theta = 3;
num_obs = 800;
num_obs_validate = ceil(0.5*num_obs);
obs = likelihood_func(true_theta, num_obs );
held_out_obs = obs( (num_obs_validate+1):end);

% Loss function to be used to measure the goodness of parameters. 
% A loss function takes the form 
% f: (weights_func, train_bags, train_target ) -> real number.  
% Lower is better.
op.drz_custom_loss_func = @(weights_func, train_bags, train_target) ... 
    norm( hist(likelihood_func( train_target*weights_func(obs(1:num_obs_validate) ), 800)) ...
    - hist(held_out_obs) );

% ---- training ------
[R, op] = distreg_zoltan_custom_loss(train_bags, train_params, op);
% R contains a regression function mapping from a stat to its param
%

display(R);

weights_func = R.regress_weights_func ;
W = weights_func(obs);
observed_stat = mean(obs);
%% plot weights given by the regression function corresponding to the best 
% chosen parameters.
%figure 
hold on
stem(train_params, W);
set(gca, 'fontsize', 16);
title(sprintf('true theta: %.2g, Observed stat: %.2g, likelihood = %s', ...
   true_theta, observed_stat, ...
   func2str(likelihood_func) ));
grid on
hold off 


% change seed back 
rng(oldRng);
% end


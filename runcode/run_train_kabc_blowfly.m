%function [ ] = run_train_kabc_blowfly(flydata, data_fname, extra )
%RUN_TRAIN_KABC_BLOWFLY Train kernel ABC with a custom loss for the Blowfly problem.
%   - Save the model to a file in saved/runcode/.
%   - The custom loss is based on the match of the held-out data statistics 
%   and the generated data's statistics. 
%   - data_fname is the prefix of the file name used for saving the .mat. The 
%   actual file name will contain some more information appended to data_fname.
%   - extra: an extra object to be saved into .mat
%
%@author Wittawat Jitkrittum  (07 Aug 2015)
%
data = load('blowfly_simul_s10');
flydata = data.simuldat;
data_fname = 'rebuttal_k2post';
% Expect data to be 
%  Name          Size             Bytes  Class     Attributes
%desc          1x110              220  char                
%params        1x6                 48  double              
%simuldat      1x180             1440  double              
%
extra = struct();
extra.data = data;
extra.exp_desc = 'kabc trained on a set of drawn samples from the model. Use custom loss on the suff stats which is based on the last 25% of the trajectory (validation set). Observed data generated from the posterior of k2-abc on the real data (180 points)';

assert(min(size(flydata))==1);
% make a row vector
flydata = flydata(:)';

seed = 1;
oldRng = rng();
rng(seed);

n = length(flydata);

op = struct();
op.num_theta_samps = 10000;
%op.dim_theta = 6; % dim(theta)
% op.yobs = flydata';

% split data into training and test data
last_idx_trn = ceil(n*3/4);
idx_trn = [ones(1, last_idx_trn), zeros(1, n - last_idx_trn)];
assert(length(idx_trn) == n);

% training indices
ntr = sum(idx_trn);
op.num_obs = ntr;
op.num_pseudodata_samps = 5000; 
%op.yobs = flydata(1:ntr)';

stat_gen_func = @ss_for_blowflydata;
likelihood_func = @ gendata_pop_dyn_eqn; 
proposal_dist = @(n) sample_from_prior_blowflydata(n); 
train_params = proposal_dist(op.num_theta_samps);

dim_stats = 10;
train_stats = zeros(dim_stats, op.num_theta_samps);
% for each single parameter, we need to construct a summary statistic of 
% observations generated by the parameter.
for i=1:size(train_params, 2)
    theta = train_params(:,i);
    observations = likelihood_func(theta, op.num_pseudodata_samps);
    stat = stat_gen_func(observations);
    train_stats(:, i) = stat;
end
% -- finish generating training set --


% ------- options for kabc ------------
% All options are described in kabc_custom_loss
op.seed = seed;

op.kabc_reg_list = 10.^(-8:1:6);

% a list of Gaussian widths squared to be used as candidates for Gaussian kernel
op.kabc_gwidth2_list = 2.^[-20, -8, -4, -3, -2, -1, 0, 1, 2, 3, 4, 8 ] ...
    .* (meddistance(train_stats)^2);

observed_stat = stat_gen_func(flydata(1:last_idx_trn));
held_out_obs = flydata( (last_idx_trn+1):end);

% Loss function to be used to measure the goodness of parameters (Gaussian width ,
% regularization parameter). A loss function takes the form 
% f: (weights_func, train_stats ) -> real number.  
% Lower is better.
op.kabc_loss_func = @(weights_func, train_stats) ...
norm(hist(likelihood_func(train_stats*weights_func(observed_stat), ...
op.num_pseudodata_samps) )-hist(held_out_obs));

% ---- training ------
[R, op] = kabc_custom_loss(train_stats, train_params, op);
% R contains a regression function mapping from a stat to its param
%

display(R);

weights_func = R.regress_weights_func ;
W = weights_func(stat_gen_func(flydata));
if isfield(R, 'regress_weights_func')
    % for some reason, sometimes this field cannot be saved.
    R = rmfield(R, 'regress_weights_func');
end
%%
post_theta = train_params*W; 
post_simdata = likelihood_func(post_theta, n); 

%s = ss_for_blowflydata(flydata);
%s_kabc = ss_for_blowflydata(post_simdata);

fname = sprintf('tr_kabc_fly-%s-ntr%d_s%d', data_fname, size(train_stats, 2), seed);
funcs = funcs_global();
fpath = funcs.runcodeSavedFile(fname);
timestamp = clock();

% put all variables to the base workspace 
W = who;
putvar(W{:});

save(fpath, 'extra', 'flydata', 'timestamp', 'R', 'op', 'W', 'post_theta', 'post_simdata', ...
   'last_idx_trn', 'observed_stat', 'held_out_obs', 'train_stats', 'train_params' );

rng(oldRng);
%end

